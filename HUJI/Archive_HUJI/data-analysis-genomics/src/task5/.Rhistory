# Clean the environment
rm(list = ls())
# Load required packages
library('data.table')
library('splines')
# Set working directory
# dir_name = "/Users/alevi/Downloads/"
dir_name = "~/Carmel/RProjects/Lab_Benjamini/data/"
# Load helper functions
helpers_file = file.path(dir_name, "help_funcs.R")
source(helpers_file)
helpers = list(
loadRData = loadRData,
fitMet = fitMetrics,
binBases = binBases,
binReads = binReads,
chk_ratio = check_proportions,
chk_ovrlp = check_overlaps,
chk_size = check_data_size,
fit_bspline = fit_bspline,
plot_bspline = plot_bspline_results
)
# Load data
bases_file = file.path(dir_name, "chr1_line.rda")
chr1_bases = helpers$loadRData(bases_file)
reads_file_all = file.path(dir_name, "TCGA-13-0723-01A_lib2_all_chr1.forward")
chr1_reads = data.table::fread(reads_file_all)
colnames(chr1_reads) = c("Chrom", "Loc", "FragLen")
# Preprocess data
nreads = nrow(chr1_reads)
myLocations = as.numeric(chr1_reads$Loc)
last_read = myLocations[nreads]
binsize = 20000
bases_20K = helpers$binBases(chr1_bases, last_read, binsize)
GC_20K = bases_20K[, 3] + bases_20K[, 4]
if(any(GC_20K>1)){GC_20K = GC_20K / binsize}
reads_20K = helpers$binReads(myLocations, binsize, last_read)
save(reads_20K, GC_20K, file = file.path(dir_name, "reads_gc_20K.rda"))
# Defining logical vectors for filtering out bins (observations)
# outliers of gc percent per bin
zeros_GC = GC_20K == 0 #bins w/o GC content
small_GC = GC_20K <= 0.3 & GC_20K > 0 #low-GC content bins (<30%)
valid_GC = GC_20K  > 0.3 #bins w/ at least 30% GC content
# identify outliers of reads count per bin
zeros_reads = reads_20K == 0 #bins w/o any reads
z_scores = (reads_20K - mean(reads_20K)) / sd(reads_20K)
xtreme_reads = abs(z_scores) > 2
few_reads = 0 < reads_20K & reads_20K < 200
whiskers = boxplot.stats(reads_20K)$stats[c(1, 5)]
confounders = reads_20K < whiskers[1] | reads_20K > whiskers[2]
# create new variables without outliers
# outliers = (zeros_GC | small_GC | zeros_reads | xtreme_reads | few_reads | confounders)
outliers = (small_GC | confounders)
reads_20K_clean = reads_20K[!outliers]
GC_20K_clean = GC_20K[!outliers]
