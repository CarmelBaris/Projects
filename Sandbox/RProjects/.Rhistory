# define window size 1 million bases
window_size <- 1e6
chr1_df$window <- ceiling(chr1_df$position / window_size)
# calculate each base frequencies for each window
base_frequencies <- chr1_df %>%
group_by(window, base) %>%
summarise(count = n()) %>%
ungroup() %>%
mutate(frequency = count / window_size)
# line graph with frequencies of each base
ggplot(base_frequencies, aes(x = window, y = frequency, color = base, group = base)) +
geom_line() +
labs(title = "Base Frequencies Across Chromosome",
x = "Window (1M bases each)",
y = "Frequency",
color = "Base") +
theme_minimal()
# Convert vector to a data frame
read_counts_df <- data.frame(
Count = reads_20M,
Location = seq(beg_region, end_region)
)
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
library('data.table')
library('manipulate')
library('tictoc')
# Group A file
reads_file = '~/Carmel/RProjects/Lab_Benjamini/data/TCGA-13-0723-01A_lib2_all_chr1.forward'
# reads_file = "/Users/alevi/Downloads/ATCGA-13-0723-01A_lib2_all_chr1.forward/TCGA-13-0723-01A_lib2_all_chr1.forward"
chr1_reads = fread(reads_file)
colnames(chr1_reads) = c("Chrom","Loc","FragLen")
getLine = function(locations, beg_region, end_region) {
# Initialize the vector to store the counts
N = end_region - beg_region + 1
loc_line = numeric(N)
# Loop through the locations and increment the count
for (loc in locations) {
# Increase count in corresponding index (relative to first read)
if (loc >= beg_region && loc <= end_region) {
loc_line[loc - beg_region + 1] = loc_line[loc - beg_region + 1] + 1
}
}
return(loc_line)
}
locations = chr1_reads$Loc
# Define the beginning and end of the region
beg_region = 1
end_region = 1 + 2e+07
start_time <- proc.time()
reads_20M <- getLine(locations, beg_region, end_region)
end_time <- proc.time()
elapsed_time <- end_time - start_time
# Count non-zero values
non_zero_count <- sum(reads_20M != 0)
print(paste("Function run time:", round(elapsed_time["elapsed"],2), "seconds"))
print(paste("Number of fragments:", round(non_zero_count/1000,2), "K"))
# Part 1: Histogram for individual locations
# read the data and create histogram
read_hist <- hist(reads_20M, breaks = 0:40 - 0.5, plot = FALSE)
# function to format the values
format_labels <- function(x) {
if (x >= 1e6) {return(paste0(round(x / 1e6, 2), "M"))}
if (x >= 1e3) {return(paste0(round(x / 1e3, 1), "K"))}
else {return(as.character(x))
}
}
# define y-axis limits
y_lim <- c(0, max(read_hist$counts) * 1.1)
# plot the histogram without y-axis
plot(read_hist, ylim = y_lim, yaxt = "n",
main = "Number of Chrom1 Locations Containing X Reads",
xlab = "Read Count (Per Location)",
ylab = "Location Count")
# format y-axis labels
y_ticks <- axTicks(2)
formatted_y_ticks <- sapply(y_ticks, format_labels)
axis(2, at = y_ticks, labels = formatted_y_ticks)
# format histogram labels
formatted_counts <- sapply(read_hist$counts, format_labels)
# add formatted labels to the histogram
text(read_hist$mids,
read_hist$counts,
formatted_counts,
pos = 3, cex = 0.65)
lines(rpois(reads_20M, mean(reads_20M)))
df <- data.frame(x)
# Calculate counts for each base in bins
N <- length(chr1_single)
bin_size <- 2000 # Adjust bin size if necessary
n_bins <- ceiling(N / bin_size)
# Set the unique bases
unique_bases <- unique(chr1_single)
# Starting with creating a dataframe that counts each base
base_counts <- data.frame(
bin = rep(1:n_bins, each = length(unique_bases)),
base = rep(unique_bases, times = n_bins),
count = numeric(length(unique_bases) * n_bins)
)
# Adding the count of each base to the dataframe, for loop that goes over each bin and then loops through each base and sums the number of occurrences
for (i in 1:n_bins) {
start_bin <- 1 + (i - 1) * bin_size
end_bin <- min(i * bin_size, N)
bin_data <- chr1_single[start_bin:end_bin]
for (base in unique_bases) {
base_counts$count[base_counts$bin == i & base_counts$base == base] <- sum(bin_data == base)
}
}
# Convert bin number to actual bin positions for plotting
base_counts$bin_position <- base_counts$bin * bin_size
# Add frequency calculation and column to base_counts dataframe
base_counts <- base_counts %>%
group_by(bin, base) %>%
mutate(frequency = count / bin_size) %>%
ungroup()
# Create another dataframe for pair frequencies of each combination of bases
pair_frequencies <- expand.grid(
bin = 1:n_bins,
base1 = unique_bases,
base2 = unique_bases,
stringsAsFactors = FALSE
)
# Filter out duplicate pairs (for example keep (A, T) but not (T, A))
pair_frequencies <- pair_frequencies %>%
filter(base1 < base2)
pair_frequencies <- pair_frequencies %>%
rowwise() %>%
mutate(
freq1 = base_counts$frequency[base_counts$bin == bin & base_counts$base == base1],
freq2 = base_counts$frequency[base_counts$bin == bin & base_counts$base == base2],
bin_position = base_counts$bin_position[base_counts$bin == bin & base_counts$base == base1]
) %>%
ungroup()
# Function to identify outliers
is_outlier <- function(x, threshold = 5) {
return(abs(x - mean(x)) > threshold * sd(x))
}
# Function to dynamically adjust label positions
adjust_label_position <- function(df) {
df <- df %>%
mutate(hjust_val = ifelse(freq1 > mean(freq1), -0.2, 1.2),
vjust_val = ifelse(freq2 > mean(freq2), -0.5, 1.2))
return(df)
}
# Create scatter plots for each unique pair with outliers highlighted
unique_pairs <- unique(pair_frequencies %>% select(base1, base2))
for (i in 1:nrow(unique_pairs)) {
base1 <- unique_pairs$base1[i]
base2 <- unique_pairs$base2[i]
plot_data <- pair_frequencies %>% filter(base1 == !!base1 & base2 == !!base2)
# Identify outliers with a stricter threshold (e.g., 4 standard deviations)
plot_data <- plot_data %>%
mutate(outlier = is_outlier(freq1, threshold = 5) | is_outlier(freq2, threshold = 5)) %>%
adjust_label_position()
plot_title <- paste("Scatter Plot of", base1, "vs", base2, "Frequencies")
p <- ggplot(plot_data, aes(x = freq1, y = freq2, color = outlier)) +
geom_point(alpha = 0.3) +
geom_text_repel(data = subset(plot_data, outlier == TRUE),
aes(label = bin_position),
size = 3, color = "red", fill = "white", box.padding = 0.35,
point.padding = 0.5, segment.color = 'grey50') +
scale_color_manual(values = c("FALSE" = "blue", "TRUE" = "red")) +
labs(title = plot_title, x = paste(base1, "Frequency"), y = paste(base2, "Frequency")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = unit(c(2, 2, 2, 2), "cm"))
print(p)
}
# Save plot to a PNG with increased height
# Adjust height and width in pixels
png("tumor_outliers_against_gc.png", height = 1400, width = 700)
# Basic plot with specified x and y limits
plot(GC, reads_tumor, ylim = c(0, 600), cex=0.7, pch=20, col=gray_07,
ylab = "Reads in Tumor Sample", xlab = "GC Content (%)")
path = "~/Carmel/RProjects/Lab_Benjamini/data"
# path = "/Users/alevi/Downloads/"
# path = "\\Users\\shawn\\Desktop\\"
### Median correction
fix_med = function(samp) {
return(samp/median(samp,na.rm=TRUE))
}
### One sample correction
fix_gc_e = function(samp, preds, eps=0) {
return((samp+eps)/(preds+eps))
}
### Two sample correction
fix_2samp_e = function(tumor, healthy, eps=0) {
return((tumor+eps)/(healthy+eps))
}
### Median correction
fix_med = function(samp) {
return(samp/median(samp,na.rm=TRUE))
}
### One sample correction
fix_gc_e = function(samp, preds, eps=0) {
return((samp+eps)/(preds+eps))
}
### Two sample correction
fix_2samp_e = function(tumor, healthy, eps=0) {
return((tumor+eps)/(healthy+eps))
}
load(sprintf("%s/reads_100_A2.rda",path))
load(sprintf("%s/reads_100_B2.rda",path))
load(sprintf("%s/GC_100.rda",path))
binsize = 25
chr2t_mat = matrix(reads_100_A2, nr = binsize)
chr2n_mat = matrix(reads_100_B2, nr = binsize)
GC_100=GC_100[1: (length(reads_100_A2)) ]
gc_mat = matrix(GC_100,nr=binsize)
reads_tumor = colSums(chr2t_mat)
reads_healthy = colSums(chr2n_mat)
GC = colMeans(gc_mat)
rm("reads_100_A2","reads_100_B2","GC_100","chr2n_mat","chr2t_mat","gc_mat") # remove from memory
# Colors
gray_07 = rgb(.25,.25,.25,0.7)
gray_05 = rgb(.25,.25,.25,0.5)
gray_03 = rgb(.25,.25,.25,0.3)
# Sample1
set.seed(50)
samp1 = sample(length(reads_tumor), 10000)
# Prediction Range
pred_range = seq(0.2,0.75,0.01)
# Evenly Spaced Knots
n_knots = 3
myknots = seq(quantile(GC,0.1), quantile(GC,0.9), length.out = n_knots + 2)[-c(1,n_knots + 2)]
# Logical vectos to identify points within the specified range
non_outliers = reads_tumor > 20 & reads_tumor < 400
highlight_outside = !(non_outliers)
# Logical condition to identify points within the specified range
outliers_tumor = reads_tumor < 20 | reads_tumor > 400
# Logical condition to identify points within the specified range
outliers_healthy = reads_healthy < 10 | reads_healthy > 200
cat("Total of", sum(outliers_healthy), "outliers, which are ",
round(sum(outliers_healthy)/length(outliers_healthy)*100,2), "% of ttl in healthy. \n\n")
cat("Total of", sum(outliers_tumor), "outliers, which are ",
round(sum(outliers_tumor)/length(outliers_tumor)*100,2), "% of ttl in tumor.")
plot(uncorrected_1n[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "Only Median Fix in Healthy Sample",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
# Median Fix Only (Tumor Sample)
med_eps0 = fix_med(reads_tumor)
# Median & GC Fix (Tumor Sample)
med_gc_1samp_eps0.3 = fix_med(fix_gc_e(reads_tumor, preds_tumor_bs,0.3))
# Fit B-spline models
reg_healthy_bs = lm(reads_healthy ~ bs(GC, degree =3, knots = myknots), subset = !(outliers_healthy))
reg_healthy_lm = lm(reads_healthy~GC,subset = reads_healthy>50 & reads_healthy<350)
reg_tumor_lm = lm(reads_tumor~GC,subset = reads_tumor>50 & reads_tumor<400)
resp_healthy_lm = predict(reg_healthy_lm,list(GC=pred_range))
preds_healthy_lm = predict(reg_healthy_lm,list(GC=GC))
response_tumor_lm = predict(reg_tumor_lm,list(GC=pred_range))
preds_tumor_lm = predict(reg_tumor_lm,list(GC=GC))
reg_tumor_lm2 = lm(reads_tumor~ 0 + GC, subset = !outliers_tumor)
response_tumor_lm2 = predict(reg_tumor_lm2,list(GC=pred_range))
plot(GC[samp1], reads_tumor[samp1], cex = 0.4, pch = 20,  col = gray_07,
main = "Tumor Sample", ylab = "Fragments Per Bin", xlab = "GC Content",
ylim = c(0, 400), xlim = c(0.2, 0.75))
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted") # Add gridlines
lines(pred_range, response_tumor_lm,col = "maroon",lw=3)
summary(reg_tumor_lm)
# Fit B-spline models
reg_healthy_bs = lm(reads_healthy ~ bs(GC, degree =3, knots = myknots), subset = !(outliers_healthy))
library('splines')
# Fit B-spline models
reg_healthy_bs = lm(reads_healthy ~ bs(GC, degree =3, knots = myknots), subset = !(outliers_healthy))
reg_tumor_bs = lm(reads_tumor ~ bs(GC, degree = 3, knots = myknots), subset = !(outliers_tumor))
# Predict responses for B-spline models
resp_healthy_bs = predict(reg_healthy_bs, list(GC = pred_range))
preds_healthy_bs = predict(reg_healthy_bs, list(GC = GC))
response_tumor_bs = predict(reg_tumor_bs, list(GC = pred_range))
preds_tumor_bs = predict(reg_tumor_bs, list(GC = GC))
# Median Fix Only (Tumor Sample)
med_eps0 = fix_med(reads_tumor)
# Median & GC Fix (Tumor Sample)
med_gc_1samp_eps0.3 = fix_med(fix_gc_e(reads_tumor, preds_tumor_bs,0.3))
# Median & GC & Two-Sample Fix
gc_fixed_healthy = fix_gc_e(reads_healthy, preds_healthy_bs)
gc_fixed_tumor = fix_gc_e(reads_tumor, preds_tumor_bs)
med_gc_2samp_eps0.3 = fix_med(fix_2samp_e(gc_fixed_tumor, gc_fixed_healthy, 0.3))
loc2bin = function(v, bin_size){
return((v*1000000)/bin_size)}
bins = loc2bin(c(25,35,75,80),2500)
stiched_range = c(bins[1]:bins[2], bins[3]:bins[4])
# Subset the data within the cancerous range
range_tumor = 1420:1470
tumor_pre_fix = med_eps0[range_tumor]
tumor_post_fix = med_gc_2samp_eps0.3[range_tumor]
# Subset the data within the healthy range
range_healthy = c(1800:1900)
healthy_pre_fix = med_eps0[range_healthy]
healthy_post_fix = med_gc_2samp_eps0.3[range_healthy]
# Calculate and print the means
cat("Tumor Mean Pre-Fix   ", round(mean(tumor_pre_fix, na.rm = TRUE),3), "\n")
cat("Tumor Mean Post-Fix  ", round(mean(tumor_post_fix, na.rm = TRUE),3), "\n\n")
cat("Healthy Mean Pre-Fix ", round(mean(healthy_pre_fix, na.rm = TRUE),3), "\n")
cat("Healthy Mean Post-Fix", round(mean(healthy_post_fix, na.rm = TRUE),3), "\n")
# Median Fix Only (no epsilon)
uncorrected_1t = fix_med(reads_tumor)
uncorrected_1n = fix_med(reads_healthy)
# GC Fix Only (no epsilon)
gc1samp_fixed_healthy = fix_gc_e(reads_healthy, preds_healthy_bs)
gc1samp_fixed_tumor = fix_gc_e(reads_tumor, preds_tumor_bs)
# Median & GC Fix (no epsilon)
corrected_1t = fix_med(gc1samp_fixed_tumor)
corrected_1n = fix_med(gc1samp_fixed_healthy)
# Median & Two-Sample Fix (incl. epsilon)
for_two_sample_without_gc_tumor = fix_gc_e(reads_tumor, preds_tumor_bs)
for_two_sample_without_gc_healthy = fix_gc_e(reads_healthy, preds_healthy_bs)
two_sample_without_gc = fix_med(fix_2samp_e(reads_tumor, reads_healthy, 0.3))
# Median & GC & Two-Sample Fix
for_gc_2samp_tumor = fix_gc_e(reads_tumor, preds_tumor_bs,0.1)
for_gc_2samp_healthy = fix_gc_e(reads_healthy, preds_healthy_bs,0.2)
gc_2samp = fix_med(fix_2samp_e(for_gc_2samp_tumor, for_gc_2samp_healthy, 0.3))
findSubset = function(start_base, end_base, cell_size){
cell_start = start_base/cell_size
cell_end = end_base/cell_size
chromosome_range = cell_start:cell_end
return (chromosome_range)
}
size = 2500
# range_a = c(findSubset(25000000,30000000,size))
# range_b = c(findSubset(28575000,28612500,size))
#range_0.5_without_gc_outliers = c(1040,1080)
range_a = c(26250000,27500000)/size
range_b = c(28575000,28612500)/size
range_c = c(25000000,26250000)/size
begin = 10000
a_bins = range_a - begin
b_bins = range_b - begin
c_bins = range_c - begin
dif_med_tumor =  abs(0.5*mean(uncorrected_1t[range_c]) - 0.5*mean(uncorrected_1t[range_b]))
std_med_tumor = sqrt(0.5* var(uncorrected_1t[range_c]) + 0.5* var(uncorrected_1t[range_b]))
snr_med_tumor = dif_med_tumor / std_med_tumor
dif_med_health =  abs(0.5*mean(uncorrected_1n[range_c]) - 0.5*mean(uncorrected_1n[range_b]))
std_med_health = sqrt(0.5* var(uncorrected_1n[range_c]) + 0.5* var(uncorrected_1n[range_b]))
snr_med_health = dif_med_health / std_med_health
dif_gc_tumor =  abs(0.5*mean(corrected_1t[range_c]) - 0.5*mean(corrected_1t[range_b]))
std_gc_tumor = sqrt(0.5* var(corrected_1t[range_c]) + 0.5* var(corrected_1t[range_b]))
snr_gc_tumor = dif_gc_tumor / std_gc_tumor
dif_gc_health =  abs(0.5*mean(corrected_1n[range_c]) - 0.5*mean(corrected_1n[range_b]))
std_gc_health = sqrt(0.5* var(corrected_1n[range_c]) + 0.5* var(corrected_1n[range_b]))
snr_gc_health = dif_gc_health / std_gc_health
dif_nogc2samp =  abs(0.5*mean(two_sample_without_gc[range_c]) - 0.5*mean(two_sample_without_gc[range_b]))
std_nogc2samp = sqrt(0.5* var(two_sample_without_gc[range_c]) + 0.5* var(two_sample_without_gc[range_b]))
snr_nogc2samp = dif_nogc2samp / std_nogc2samp
dif_gc2samp =  abs(0.5*mean(gc_2samp[range_c]) - 0.5*mean(gc_2samp[range_b]))
std_gc2samp = sqrt(0.5* var(gc_2samp[range_c]) + 0.5* var(gc_2samp[range_b]))
snr_gc2samp = dif_gc2samp / std_gc2samp
cat("Region A ", min(range_a), ":", max(range_a), "\n")
cat("Region B ", min(range_b), ":", max(range_b), "\n")
cat("Region C ", min(range_c), ":", max(range_c), "\n")
cat("\n")
cat("SNR Both Post 2-Sample & GC Fix:", round(snr_gc2samp,2), "\n")
cat("SNR Both Post 2-Sample Only Fix:", round(snr_nogc2samp,2), "\n")
cat("SNR Tumor      Post GC Only Fix:", round(snr_gc_tumor,2), "\n")
cat("SNR Tumor  Before Complex Fixes:", round(snr_med_tumor,2), "\n")
cat("\n")
cat("SNR Both Post 2-Sample & GC Fix:", round(snr_gc2samp,5), "\n")
cat("SNR Both Post 2-Sample Only Fix:", round(snr_nogc2samp,5), "\n")
cat("SNR Healthy    Post GC Only Fix:", round(snr_gc_health,5), "\n")
cat("SNR Health Before Complex Fixes:", round(snr_med_health,5), "\n")
plot(uncorrected_1n[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "Only Median Fix in Healthy Sample",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins,   col="purple",         lt=1, lwd=3)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# abline(v=a_bins, col="forestgreen", lwd=2)
# abline(v=b_bins, col="indianred", lwd=1.3)
# rect(1420, 0, 1470, 2, col = rgb(1, 0, 0, alpha = 0.2), border = NA) # Highlight the range with a shaded region
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(uncorrected_1t[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "Only Median Fix in Tumor Sample",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=3, lt=2)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(two_sample_without_gc[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "After Applying 2Samp Fix (No GC)",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=3, lt=2)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(gc_2samp[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "After Applying GC & 2Samp Fixes",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=2)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# Save plot to a PNG with increased height
# Adjust height and width in pixels
png("healthy_outliers_against_gc.png", height = 1400, width = 700)
# Basic plot with specified x and y limits
plot(GC, reads_healthy, ylim = c(0, 600), cex=0.7, pch=20, col=gray_07,
ylab = "Reads in Healthy Sample", xlab = "GC Content (%)")
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted") # Add gridlines
# Logical condition to identify points within the specified range
outliers_healthy = reads_healthy < 25 | reads_healthy > 200
# Highlight points outside the specified range
points(GC[outliers_healthy], reads_healthy[outliers_healthy], col = "indianred2")
abline(h=c(25,200), col="darkblue", lty=2, lwd=1.2)
# Close the PNG device
dev.off()
# Save plot to a PNG with increased height
# Adjust height and width in pixels
png("tumor_outliers_against_gc.png", height = 1400, width = 700)
# Basic plot with specified x and y limits
plot(GC, reads_tumor, ylim = c(0, 600), cex=0.7, pch=20, col=gray_07,
ylab = "Reads in Tumor Sample", xlab = "GC Content (%)")
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted") # Add gridlines
# Logical condition to identify points within the specified range
outliers_tumor = reads_tumor < 50 | reads_tumor > 400
# Highlight points outside the specified range
points(GC[outliers_tumor], reads_tumor[outliers_tumor], col = "indianred2")
abline(h=c(50,400), col="darkblue", lty=2, lwd=1.2)
# Close the PNG device
dev.off()
# Save plot to a PNG with increased height
# Adjust height and width in pixels
png("tumor_outliers_against_gc.png", height = 1400, width = 700)
# Basic plot with specified x and y limits
plot(GC, reads_tumor, ylim = c(0, 600), cex=0.7, pch=20, col=gray_07,
ylab = "Reads in Tumor Sample", xlab = "GC Content (%)")
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted") # Add gridlines
# Logical condition to identify points within the specified range
outliers_tumor = reads_tumor < 50 | reads_tumor > 400
# Highlight points outside the specified range
points(GC[outliers_tumor], reads_tumor[outliers_tumor], col = "indianred2")
abline(h=c(50,400), col="darkblue", lty=2, lwd=1.2)
# Close the PNG device
dev.off()
plot(uncorrected_1n[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "Only Median Fix in Healthy Sample",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins,   col="purple",         lt=1, lwd=3)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# abline(v=a_bins, col="forestgreen", lwd=2)
# abline(v=b_bins, col="indianred", lwd=1.3)
# rect(1420, 0, 1470, 2, col = rgb(1, 0, 0, alpha = 0.2), border = NA) # Highlight the range with a shaded region
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(uncorrected_1t[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "Only Median Fix in Tumor Sample",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=3, lt=2)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(two_sample_without_gc[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "After Applying 2Samp Fix (No GC)",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=3, lt=2)
# Highlight the ranges with a shaded region
rect(a_bins[1], 0.25, a_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
plot(gc_2samp[begin:12000], xaxt="n",
ylim = c(-0.3,2.3), col=gray_03, cex=0.7, pch=20,
main = "After Applying GC & 2Samp Fixes",
xlab="Chromosomal Location", ylab="Est. No. of Copies")
abline(h=c(0.7,1), col="cornflowerblue", lt=2, lwd=1.5)
# abline(v=c_bins, col="purple", lwd=2)
# Highlight the ranges with a shaded region
rect(c_bins[1], 0.25, c_bins[2], 2.2, col = rgb(0,0.5,1,0.1), border = NA)
rect(b_bins[1]-10, 0.25, b_bins[2]+30, 2.2, col = rgb(1,0,0,0.2), border = NA)
dif_med_tumor =  abs(0.5*mean(uncorrected_1t[range_c]) - 0.5*mean(uncorrected_1t[range_b]))
std_med_tumor = sqrt(0.5* var(uncorrected_1t[range_c]) + 0.5* var(uncorrected_1t[range_b]))
snr_med_tumor = dif_med_tumor / std_med_tumor
dif_med_health =  abs(0.5*mean(uncorrected_1n[range_c]) - 0.5*mean(uncorrected_1n[range_b]))
std_med_health = sqrt(0.5* var(uncorrected_1n[range_c]) + 0.5* var(uncorrected_1n[range_b]))
snr_med_health = dif_med_health / std_med_health
dif_gc_tumor =  abs(0.5*mean(corrected_1t[range_c]) - 0.5*mean(corrected_1t[range_b]))
std_gc_tumor = sqrt(0.5* var(corrected_1t[range_c]) + 0.5* var(corrected_1t[range_b]))
snr_gc_tumor = dif_gc_tumor / std_gc_tumor
dif_gc_health =  abs(0.5*mean(corrected_1n[range_c]) - 0.5*mean(corrected_1n[range_b]))
std_gc_health = sqrt(0.5* var(corrected_1n[range_c]) + 0.5* var(corrected_1n[range_b]))
snr_gc_health = dif_gc_health / std_gc_health
dif_nogc2samp =  abs(0.5*mean(two_sample_without_gc[range_c]) - 0.5*mean(two_sample_without_gc[range_b]))
std_nogc2samp = sqrt(0.5* var(two_sample_without_gc[range_c]) + 0.5* var(two_sample_without_gc[range_b]))
snr_nogc2samp = dif_nogc2samp / std_nogc2samp
dif_gc2samp =  abs(0.5*mean(gc_2samp[range_c]) - 0.5*mean(gc_2samp[range_b]))
std_gc2samp = sqrt(0.5* var(gc_2samp[range_c]) + 0.5* var(gc_2samp[range_b]))
snr_gc2samp = dif_gc2samp / std_gc2samp
# Basic plot with specified x and y limits
plot(GC, reads_healthy, ylim = c(0, 600), cex=0.7, pch=20, col=gray_07,
ylab = "Reads in Healthy Sample", xlab = "GC Content (%)")
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted") # Add gridlines
# Highlight points outside the specified range
points(GC[outliers_healthy], reads_healthy[outliers_healthy], col = "indianred2")
abline(h=c(10,200), col="darkblue", lty=2, lwd=1.2)
