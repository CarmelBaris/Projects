ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
paste0("(", round(ans1, 2), ", rounded up)"),
"students who major in economics.")
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics."),
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics.",
paste0("(~", round(ans1, 2), ", rounded up)")
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics.")
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics.",
paste0("(~", round(ans1, 2), "rounded up)")
)
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics",
paste0("(~", round(ans1, 2), "rounded up).")
)
CL=0.9
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- ((2*pnorm(conf.lvl)*p.max.bound*(1-p.max.bound))/CI.len.max.bound)^2
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics",
paste0("(~", round(ans1, 2), ", rounded up).")
)
BerProportionEst <- function(CL, CI.len.max.bound, p.max.bound=0.5){
#' Helper function
#'
#' @param CL required quantile of confidence level (e.g. if 90%, insert 0.9)
#' @param CI.len.max.bound given maximal length of confidence interval
#' @param p.max.bound given maximal proportion of "successful" samples (default in Bernoulli is 0.5, given cannot exceed this default)
α=1-CL
conf.lvl=1-0.5*α
Z=pnorm(conf.lvl)
est.var.population <- p.max.bound*(1-p.max.bound)
sqrt.n <- 2*Z*est.var.population / CI.len.max.bound
return((sqrt.n)^2)
}
BerProportionEst(CL=0.9, CI.len.max.bound=0.19)
CL=0.9 #required confidence level
α=1-CL
conf.lvl=1-0.5*α
p.max.bound = 0.5
CI.len.max.bound = 0.19
ans1 <- BerProportionEst(CL=0.9, CI.len.max.bound=0.19)
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics",
paste0("(~", round(ans1, 2), ", rounded up).")
)
3.56*3.56
1-0.95
0.05/2
1-0.025
pnorm(0.975)
a.CL=0.9 #required confidence level
a.α=1-CL
a.conf.lvl=1-0.5*α
a.p.max.bound = 0.5
a.CI.len.max.bound = 0.19
ans1 <- BerProportionEst(CL=a.CL,
CI.len.max.bound=a.CI.len.max.bound)
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics",
paste0("(~", round(ans1, 2), ", rounded up).")
)
BerProportionEst <- function(CL, CI.len.max.bound, p.max.bound=0.5, σ, prop=F){
#' Helper function
#'
#' @param CL required quantile of confidence level (e.g. if 90%, insert 0.9)
#' @param CI.len.max.bound given maximal length of confidence interval
#' @param p.max.bound given maximal proportion of "successful" samples (default in Bernoulli is 0.5, given cannot exceed this default)
α=1-CL
conf.lvl=1-0.5*α
Z=pnorm(conf.lvl)
if(prop=T) est.var.population <- p.max.bound*(1-p.max.bound)
BerProportionEst <- function(CL, CI.len.max.bound, p.max.bound=0.5, σ, prop=F){
#' Helper function
#'
#' @param CL required quantile of confidence level (e.g. if 90%, insert 0.9)
#' @param CI.len.max.bound given maximal length of confidence interval
#' @param p.max.bound given maximal proportion of "successful" samples (default in Bernoulli is 0.5, given cannot exceed this default)
α=1-CL
conf.lvl=1-0.5*α
Z=pnorm(conf.lvl)
if(prop==T) est.var.population <- p.max.bound*(1-p.max.bound)
else est.var.population <- σ^2
sqrt.n <- 2*Z*est.var.population / CI.len.max.bound
return((sqrt.n)^2)
}
a.CL=0.9 #required confidence level
a.α=1-CL
a.conf.lvl=1-0.5*α
a.p.max.bound = 0.5
a.CI.len.max.bound = 0.19
ans1 <- BerProportionEst(CL=a.CL,
CI.len.max.bound=a.CI.len.max.bound,
prop=T)
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a population of at least",
paste0(round(ans1, 0)),
"students who major in economics",
paste0("(~", round(ans1, 2), ", rounded up).")
)
b.CL=0.95 #required confidence level
b.α=1-CL
b.conf.lvl=1-0.5*α
b.p.max.bound = 0.5
b.CI.len.max.bound = 0.5
ans1 <- BerProportionEst(CL=b.CL,
CI.len.max.bound=b.CI.len.max.bound)
b.CL=0.95 #required confidence level
b.α=1-CL
b.conf.lvl=1-0.5*α
b.p.max.bound = 0.5
b.CI.len.max.bound = 0.5
b.σ = 3.06
ans2 <- BerProportionEst(CL=b.CL,
CI.len.max.bound=b.CI.len.max.bound,
σ=b.σ)
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a length survey of at least",
paste0(round(ans1, 0)),
"Red Barkan fish",
paste0("(~", round(ans1, 2), ", rounded up).")
)
b.CL=0.95 #required confidence level
b.α=1-CL
b.conf.lvl=1-0.5*α
b.p.max.bound = 0.5
b.CI.len.max.bound = 0.5
b.σ = 3.06
ans2 <- BerProportionEst(CL=b.CL,
CI.len.max.bound=b.CI.len.max.bound,
σ=b.σ)
cat("For a confidence level of",
paste0(conf.lvl*100,"%"),
"we need a length survey of at least",
paste0(round(ans2, 0)),
"Red Barkan fish",
paste0("(~", round(ans2, 2), ", rounded up).")
)
(2*2*3.06*pnorm(0.95))^2
(2*2*3.06*pnorm(0.95))^2
1/0.5
(4*3.06*pnorm(0.975))^2
?elif
?else
install.packages(DescTools)
install.packages("DescTools")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("DescTools")
pnorm(0.975)
x = c(1.5, 1.5, 1.5, 1.5, 1.5,
1.5, 1.5, 1.5, 1.5, 1.5)
Var(x)
library("DescTools")
Var(x)
msg="When using the unbiased estimator for variance of Danceability Index, we get the following:"
ci.unknown.s <- rangeConfIntervalT(n=length(dance), sd=σ.dance.mom, p=0.97, avg=mean(dance), is_sd=T, with_txt=T)
interval = paste(msg,
ci.unknown.s[1],
ci.unknown.s[2],
ci.unknown.s[3],
sep="\n")
cat(interval[1])
msg="When using the unbiased estimator for variance of Danceability Index, we get the following:"
ci.unknown.s <- rangeConfIntervalT(n=length(dance), sd=σ.dance.mom, p=0.97, avg=mean(dance), is_sd=T, with_txt=T)
#
# interval = paste(msg,
#                  ci.unknown.s[1],
#                  ci.unknown.s[2],
#                  ci.unknown.s[3],
#                  sep="\n")
#
# cat(interval[1])
msg="When using the unbiased estimator for variance of Danceability Index, we get the following:"
ci.unknown.s <- TConfIntervalForExp(n=length(dance), sd=σ.dance.mom, p=0.97, avg=mean(dance), is_sd=T, with_txt=T)
knitr::opts_chunk$set(echo = TRUE)
# ++++++++++++++++++++++++ #
# INSTALLING DEPENDENCIES
# ++++++++++++++++++++++++ #
#install required only once per user
# install.packages("EnvStats")
# dplyr::install.packages("kableExtra")
# dplyr::install.packages("dplyr")
# tidyverse::install.packages("tidyverse")
# tinytex::install_tinytex()
# ++++++++++++++++++++++++ #
# LOADING DEPENDENCIES
# ++++++++++++++++++++++++ #
library(tinytex)
library(knitr)
library(EnvStats)
# library(dplyr)
# library(tidyverse)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance.origin <- songs$danceability
valence.origin <- songs$valence
CoverageProb<-function(CL, distr='z', n=NULL){
#' Calculates requested coverage probability of a confidence interval (CI).
#' i.e. What are the odds that the real parameter resides within our CI?
#'
#' @param CL required Confidence Level, 1-α
#' @param distr which accumulative distribution to use
#'      'z' standard normal-distribution (default)
#'      't' Student's t-distribution
if (distr=='z'){return(qnorm(1-CL)/2)}
else if (distr=='t'){return(qt(0.5*(1+CL)),(n-1))} #quantile of estimated var
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, CL, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param CL required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=CoverageProb(CL, "z")
cat("Confidence interval for a confidence level of:",paste0(CL*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, CL, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param CL required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=CoverageProb(CL, "z")
cat("Confidence interval for a confidence level of:",paste0(CL*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,CL=0.92,avg=75 ,is_sd=F)
#install.packages("docstring")
library(docstring)
#++++++++++++++++++++++++++++++++++++++++
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
CoverageProb<-function(CL, distr='z', n=NULL){
#' Calculates requested coverage probability of a confidence interval (CI).
#' i.e. What are the odds that the real parameter resides within our CI?
#'
#' @param CL required Confidence Level, 1-α
#' @param distr which accumulative distribution to use
#'      'z' standard normal-distribution (default)
#'      't' Student's t-distribution
if (distr=='z'){return(qnorm(1-CL)/2)}
else if (distr=='t'){return(qt(0.5*(1+CL)),(n-1))} #quantile of estimated var
}
knitr::opts_chunk$set(echo = TRUE)
# ++++++++++++++++++++++++ #
# INSTALLING DEPENDENCIES
# ++++++++++++++++++++++++ #
#install required only once per user
# EnvStats::install.packages("EnvStats")
# docstring::install.packages("docstring")
# dplyr::install.packages("kableExtra")
# dplyr::install.packages("dplyr")
# tidyverse::install.packages("tidyverse")
# tinytex::install_tinytex()
# ++++++++++++++++++++++++ #
# LOADING DEPENDENCIES
# ++++++++++++++++++++++++ #
library(tinytex)
library(knitr)
library(EnvStats)
library(docstring)
# library(dplyr)
# library(tidyverse)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance.origin <- songs$danceability
valence.origin <- songs$valence
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
CoverageProb<-function(CL, distr='z', n=NULL){
#' Calculates requested coverage probability of a confidence interval (CI).
#' i.e. What are the odds that the real parameter resides within our CI?
#'
#' @param CL required Confidence Level, 1-α
#' @param distr which accumulative distribution to use
#'      'z' standard normal-distribution (default)
#'      't' Student's t-distribution
if (distr=='z'){return(qnorm(1-CL)/2)}
else if (distr=='t'){return(qt(0.5*(1+CL)),(n-1))} #quantile of estimated var
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, CL, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param CL required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=CoverageProb(CL, "z")
cat("Confidence interval for a confidence level of:",paste0(CL*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,CL=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
TConfIntervalForExp<-function(n, sd, CL, avg, is_sd=T, with_txt=F){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=CoverageProb(CL, "t", n)
if (with_txt == F){return(
c(avg-t*sd/sqrt(n), #lower bound (left border)
avg+t*sd/sqrt(n), #upper bound (right border)
2*t*sd/sqrt(n) #length
)
)}
lower <- avg-t*(sd/sqrt(n))
upper <- avg-t*(sd/sqrt(n))
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", lower)
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
CoverageProb<-function(CL, distr='z', n=NULL){
#' Calculates requested coverage probability of a confidence interval (CI).
#' i.e. What are the odds that the real parameter resides within our CI?
#'
#' @param CL required Confidence Level, 1-α
#' @param distr which accumulative distribution to use
#'      'z' standard normal-distribution (default)
#'      't' Student's t-distribution
quantile.α <- 0.5*(1+CL) #1-α/2
if (distr=='z'){return(qnorm(quantile.α))}
else if (distr=='t'){return(qt(quantile.α),(n-1))} #quantile of estimated var
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, CL, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param CL required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=CoverageProb(CL, "z")
cat("Confidence interval for a confidence level of:",paste0(CL*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,CL=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
TConfIntervalForExp<-function(n, sd, CL, avg, is_sd=T, with_txt=F){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=CoverageProb(CL, "t", n)
if (with_txt == F){return(
c(avg-t*sd/sqrt(n), #lower bound (left border)
avg+t*sd/sqrt(n), #upper bound (right border)
2*t*sd/sqrt(n) #length
)
)}
lower <- avg-t*(sd/sqrt(n))
upper <- avg-t*(sd/sqrt(n))
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", lower)
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
weight <- c(3.2, 2.6, 3.4, 3.1, 2.8, 2.4, 3.6, 4.1)
quantile.lower <- 0.5*(1+CL) #1-α/2
weight <- c(3.2, 2.6, 3.4, 3.1, 2.8, 2.4, 3.6, 4.1)
quantile.lower <- 0.5*(1+0.98) #1-α/2
quantile.upper <- 1-quantile.lower #α/2
lower <- (n-1) * var(weight) / qchisq(quantile.lower, (n-1))
weight <- c(3.2, 2.6, 3.4, 3.1, 2.8, 2.4, 3.6, 4.1)
n=length(weight)
quantile.lower <- 0.5*(1+0.98) #1-α/2
quantile.upper <- 1-quantile.lower #α/2
lower <- (n-1) * var(weight) / qchisq(quantile.lower, (n-1))
upper <- (n-1) * var(weight) / qchisq(quantile.upper, (n-1))
weight <- c(3.2, 2.6, 3.4, 3.1, 2.8, 2.4, 3.6, 4.1)
n=length(weight)
quantile.lower <- 0.5*(1+0.98) #1-α/2
quantile.upper <- 1-quantile.lower #α/2
lower <- (n-1) * var(weight) / qchisq(quantile.lower, (n-1))
upper <- (n-1) * var(weight) / qchisq(quantile.upper, (n-1))
lower
upper
