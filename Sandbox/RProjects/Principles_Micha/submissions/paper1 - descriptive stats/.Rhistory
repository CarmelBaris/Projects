\usepackage(amsmath)
install.packages("amsmath")
knitr::opts_chunk$set(echo = TRUE)
library(UsingR)
install_tinytex()
tinytex::install_tinytex()
# tinytex::install_tinytex() #install required only once per user
library(tinytex)
\documentclass[12pt]{amsmath}
x <- c(1.18,1.29,0.49,0.19,1.57,3.13,1.61,0.92,0.42,4.48,0.91,0.05,0.11, 0.68,0.76,1.89,3.09,4.83,1.53,1.94,1.32,0.08,1.29,0.06,0.63,0.25, 1.93,1.01,0.01,0.78)
x <- c(1.18,1.29,0.49,0.19,1.57,3.13,1.61,0.92,0.42,4.48,0.91,0.05,0.11, 0.68,0.76,1.89,3.09,4.83,1.53,1.94,1.32,0.08,1.29,0.06,0.63,0.25, 1.93,1.01,0.01,0.78)
len(x)
x <- c(1.18,1.29,0.49,0.19,1.57,3.13,1.61,0.92,0.42,4.48,0.91,0.05,0.11, 0.68,0.76,1.89,3.09,4.83,1.53,1.94,1.32,0.08,1.29,0.06,0.63,0.25, 1.93,1.01,0.01,0.78)
length(x)
mean <- mean(x)
lambda <- 1/mean(x)
pexp(q=lambda, lower.tail = TRUE)
pexp(q=lambda, lower.tail = FALSE)
?pexp
?pexp
pexp(q=2, rate=lambda, lower.tail = FALSE)
?ppois
knitr::opts_chunk$set(echo = TRUE)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
total.origin <- length(dance)
#only danceable songs from years 2019 and 2020
keep <- (dance>0 & songs$year > 2018 & songs$year < 2021)
dance <- dance[keep]
valence <- valence[keep]
total.origin - length(dance) # number of songs removed
summary(dance)
summary(dance)
summary(valence)
?summary
summary(valence, digits=4)
summary(valence, digits=2)
options(digits=10)
summary(valence, digits=4)
summary(valence, digits=2)
?formatC
?summary
summary(object=valence, digits=cbind(formatC(object, digits = 5, width = 8, format = "f", flag = "0")))
summary(object=valence, digits=cbind(formatC(valence, digits = 5, width = 8, format = "f", flag = "0")))
clean <- cbind(rnorm(10000),valence, runif(10000))
summary(valence)
summary(trunc(valence))
summary(valence, digits=2)
summary(valence, digits=0)
summary(valence, digits=5)
summary(valence, digits=2)
summary(valence)
print(summary(valence), digits=2)
summary(valence)
print(summary(valence), digits=2)
print(summary(valence))
print(summary(valence), digits=5)
knitr::opts_chunk$set(echo = TRUE)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
summary(dance)
print(summary(valence), digits=5)
#before cleanup
total.origin <- length(dance)
#only danceable songs from years 2019 and 2020
keep <- (dance>0 & songs$year > 2018 & songs$year < 2021)
dance <- dance[keep]
valence <- valence[keep]
total.origin - length(dance) # number of songs removed
#before cleanup
total.origin <- length(dance)
#only danceable songs from years 2019 and 2020
keep <- (dance>0 & songs$year > 2018 & songs$year < 2021)
dance <- dance[keep]
valence <- valence[keep]
removed <- total.origin - length(dance) # number of songs removed
knitr::opts_chunk$set(echo = TRUE)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
summary(dance)
print(summary(valence), digits=5)
#before cleanup
total.origin <- length(dance)
#only danceable songs from years 2019 and 2020
keep <- (dance>0 & songs$year > 2018 & songs$year < 2021)
dance <- dance[keep]
valence <- valence[keep]
removed <- total.origin - length(dance) # number of songs removed
summary(dance)
print(summary(valence), digits=5)
print(summary(valence), digits=3)
print(summary(valence), digits=5)
print(summary(dance), digits=3)
table(valence, danceability)
table(valence, dance)
summary(dance)
hist(dance, breaks = 50)
mean(dance)
hist(dance, breaks = 50)
hist(valence, breaks = 50)
hist(dance, breaks = 50)
hist(valence, breaks = 50)
summary(dance)
summary(valence)
summary(dance)
summary(valence)
summary(dance)
sd(dance)
sd(valence)
abs(dance-mean(dance))/sd(dance)
sum(abs(dance-mean(dance))/sd(dance)<=1)
sum(abs(dance-mean(dance))/sd(dance)<=2)
dance_one_sd <- sum(abs(dance-mean(dance))/sd(dance)<=1)
dance_two_sd <- sum(abs(dance-mean(dance))/sd(dance)<=2)
valence_one_sd <- sum(abs(valence-mean(valence))/sd(valence)<=1)
valence_two_sd <- sum(abs(valence-mean(valence))/sd(valence)<=2)
?if
?`conditionalExtension-class`
?`conditionalExtension-class
1`]`
sd1 <- sum(abs(valence-mean(valence))/sd(valence)<=1 & abs(dance-mean(dance))/sd(dance)<=1)
sd2 <- sum(abs(valence-mean(valence))/sd(valence)<=2 & abs(dance-mean(dance))/sd(dance)<=2)
sd_dance <- sd(dance)
sd_valence <- sd(valence)
sd1 <- sum(abs(valence-mean(valence))/sd(valence)<=1 & abs(dance-mean(dance))/sd(dance)<=1)
sd2 <- sum(abs(valence-mean(valence))/sd(valence)<=2 & abs(dance-mean(dance))/sd(dance)<=2)
sd_dance <- sd(dance)
sd_valence <- sd(valence)
sd1 <- sum(abs(valence-mean(valence))/sd(valence)<=1 & abs(dance-mean(dance))/sd(dance)<=1)
sd2 <- sum(abs(valence-mean(valence))/sd(valence)<=2 & abs(dance-mean(dance))/sd(dance)<=2)
sd3 <- sum(abs(valence-mean(valence))/sd(valence)<=3 & abs(dance-mean(dance))/sd(dance)<=3)
sd6 <- sum(abs(valence-mean(valence))/sd(valence)<=6 & abs(dance-mean(dance))/sd(dance)<=3)
summary(valence)
summary(dance)
summary(valence)
summary(valence)
summary(dance)
sd_dance <- sd(dance)
sd_valence <- sd(valence)
# Scatter plot (be patient, may run slowly):
plot(valence,dance,pch=20) # pch determines type of graphical markers
abline(v=mean(valence),col="blue") #v=valence values
abline(h=mean(dance),col="purple") #h=danceability values
#Observing the plot, we assume a positive correlation
cor <- cor(valence, dance)
cov <- cov(valence, dance)
#Linear regression line:
fit<-lm(dance ~ valence)
summary(fit)
abline(fit,col="red")
# the fit object includes info about regression such as
# coefficients, residuals, fitted values. access with fit$ & tab
fit$coefficients
fit$residuals
sum(fit$residuals)
fit$fitted.values
sum(fit$fitted.values-dance)
lm(formula = dance ~ valence)
a.origin<-fit$coefficients[2]
b.origin<-fit$coefficients[1]
a <- a.origin
b <- b.origin
print(hist(dance))
?plot
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex() #install required only once per user
library(tinytex)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex() #install required only once per user
library(tinytex)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
print(summary(valence), digits=3)
print(summary(valence), digits=5)
#before cleanup
total.origin <- length(dance)
#only danceable songs from years 2019 and 2020
keep <- (dance>0 & songs$year > 2018 & songs$year < 2021)
dance <- dance[keep]
valence <- valence[keep]
removed <- total.origin - length(dance) # number of songs removed
print(summary(dance), digits=3)
print(summary(valence), digits=5)
print(summary(valence), digits=5)
print(hist(dance, breaks = 50))
print(hist(valence, breaks = 50))
print(hist(dance, breaks = 50))
print(hist(valence, breaks = 50))
# Scatter plot (be patient, may run slowly):
print(plot(valence,dance,pch=20, col='gray')) #pch is graph's markers
abline(v=mean(valence),col="blue") #v=valence index units
abline(h=mean(dance),col="purple") #h=danceability index units
#Observing the plot, we assume a positive correlation
cor <- cor(valence, dance)
cov <- cov(valence, dance)
#Linear regression line:
fit<-lm(dance ~ valence)
summary(fit)
abline(fit,col="red")
# the fit object includes info about regression such as
# coefficients, residuals, fitted values. access with fit$ & tab
fit$coefficients
fit$residuals
sum(fit$residuals)
fit$fitted.values
sum(fit$fitted.values-dance)
lm(formula = dance ~ valence)
a.origin<-fit$coefficients[2]
b.origin<-fit$coefficients[1]
a <- a.origin
b <- b.origin
?fig.show
??fig.show
# Scatter plot (be patient, may run slowly):
print(plot(valence,dance,pch=20, col='gray')) #pch is graph's markers
abline(v=mean(valence),col="blue") #v=valence index units
abline(h=mean(dance),col="purple") #h=danceability index units
#Observing the plot, we assume a positive correlation
cor <- cor(valence, dance)
cov <- cov(valence, dance)
#Linear regression line:
fit<-lm(dance ~ valence)
summary(fit)
abline(fit,col="red")
# the fit object includes info about regression such as
# coefficients, residuals, fitted values. access with fit$ & tab
sum(fit$residuals)
sum(fit$fitted.values-dance)
lm(formula = dance ~ valence)
a.origin<-fit$coefficients[2]
b.origin<-fit$coefficients[1]
a <- a.origin
b <- b.origin
# Scatter plot (be patient, may run slowly):
print(plot(valence,dance,pch=20, col='gray')) #pch is graph's markers
abline(v=mean(valence),col="blue") #v=valence index units
abline(h=mean(dance),col="purple") #h=danceability index units
#Observing the plot, we assume a positive correlation
cor <- cor(valence, dance)
cov <- cov(valence, dance)
#Linear regression line:
fit<-lm(dance ~ valence)
summary(fit)
abline(fit,col="red")
# the fit object includes info about regression such as
# coefficients, residuals, fitted values. access with fit$ & tab
sum(fit$residuals)
sum(fit$fitted.values-dance)
lm(formula = dance ~ valence)
a.origin<-fit$coefficients[2]
b.origin<-fit$coefficients[1]
a <- a.origin
b <- b.origin
# Scatter plot (be patient, may run slowly):
print(plot(valence,dance,pch=20, col='gray')) #pch is graph's markers
abline(v=mean(valence),col="blue") #v=valence index units
abline(h=mean(dance),col="purple") #h=danceability index units
#Observing the plot, we assume a positive correlation
cor <- cor(valence, dance)
cov <- cov(valence, dance)
#Linear regression line:
fit<-lm(dance ~ valence)
summary(fit)
abline(fit,col="red")
# the fit object includes info about regression such as
# coefficients, residuals, fitted values. access with fit$ & tab
sum(fit$residuals)
sum(fit$fitted.values-dance)
lm(formula = dance ~ valence)
a.origin<-fit$coefficients[2]
b.origin<-fit$coefficients[1]
a <- a.origin
b <- b.origin
?r
?```r```
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex() #install required only once per user
library(tinytex)
# ++++++++++++++++++++++++ #
# PREPARING THE DATA
# ++++++++++++++++++++++++ #
#read data
songs <- read.csv("../../data/mine/spotify1921to2020.csv")
dance <- songs$danceability
valence <- songs$valence
print(hist(dance, breaks = 50))
print(hist(valence, breaks = 50))
```
```{r fig-margin, fig.margin=TRUE}
knitr::opts_chunk$set(echo = TRUE)
plot(cars)
plot(cars)
plot(cars, pch = 18)
plot(cars, pch = 18)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
plot(cars, pch = 18)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
par(mar = c(4, 4, .2, .1))
plot(cars, pch = 19)
plot(pressure, pch = 17)
knitr::opts_chunk$set(echo = TRUE)
gganimate::install_gganimate()
install.packages("gganimate")
knitr::opts_chunk$set(echo = TRUE)
library(gganimate)
library(gganimate)
ggplot(airquality, aes(Day, Temp, group = Month)) +
geom_line() +
transition_reveal(Month)
install.packages(c("ffmpeg", "libvpx"))
install.packages("gifski")
