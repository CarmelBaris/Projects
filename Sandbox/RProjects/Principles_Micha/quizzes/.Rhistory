summary(fit.Blood.Cigar)$r.squared == cov(cigarettes, Blood.Pressure)
round(summary(fit.Blood.Cigar)$r.squared) == round(cov(cigarettes, Blood.Pressure))
round(summary(fit.Blood.Cigar)$r.squared) == round(cov(cigarettes, Blood.Pressure)**2)
cov(cigarettes, Blood.Pressure)**2
summary(fit.Blood.Cigar)$r.squared
round(summary(fit.Blood.Cigar)$r.squared) == round(cor(cigarettes, Blood.Pressure)**2)
summary(fit.Blood.Cigar)$r.squared == round(cor(cigarettes, Blood.Pressure)**2)
round(summary(fit.Blood.Cigar)$r.squared) == round(cor(cigarettes, Blood.Pressure)**2)
---
# Linear Transformations on Regression Line
?gamma
---
# Linear Transformations on Regression Line
?pgamma
?pgamma
---
For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
knitr::opts_chunk$set(echo = TRUE)
pgamma(x=2.5, shape=5, rate=3, lower.tail = FALSE) # P[X>2.5]
pgamma(x=c(2.5), shape=5, rate=3, lower.tail = FALSE) # P[X>2.5]
pgamma(q=c(2.5), shape=5, rate=3, lower.tail = FALSE) # P[X>2.5]
cd.a <- pgamma(q=c(4), shape=2, rate=4, lower.tail = FALSE) # P[X≤4]
cd.b <- pgamma(q=c(2), shape=2, rate=4, lower.tail = FALSE) # P[X≤2]
cd.a-cd.b # P[2<X<4]
cd.a <- pgamma(q=c(4), shape=2, rate=4) # P[X<4]
cd.b <- pgamma(q=c(2), shape=2, rate=4) # P[X<2]
cd.a-cd.b # P[2<X<4]
cd.a <- pgamma(q=4, shape=2, rate=4) # P[X<4]
cd.b <- pgamma(q=4, shape=2, rate=4) # P[X<2]
cd.a-cd.b # P[2<X<4]
cd.a <- pgamma(q=4, shape=2, rate=4) # P[X<4]
cd.b <- pgamma(q=2, shape=2, rate=4) # P[X<2]
cd.a-cd.b # P[2<X<4]
pgamma(q=2.5, shape=5, rate=3, lower.tail = FALSE) # P[X>2.5]
pgamma(q=2.5, shape=5, scale=1/3, lower.tail = FALSE) # P[X>2.5]
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex() #install required only once per user
library(tinytex)
?lognormal
log(100000)
log.10k <- log(10000)
denominator <- log.10k-8
log(10000)-8
pnorm(log(10000)-8)
knitr::opts_chunk$set(echo = TRUE)
q7..p <- p #unbiased.est
#GIVEN DATA
q5..1minusα = 0.92 #quantile of required confidence level
q5..α = 1 - q5..1minusα #required max standard error
q5..n = 10 #sample size
q5..df = q5..n-1 #degrees of freedom
q5..est.σ = 12
q5..unbiased.est = 75 #avg(package weight)
#CALCULATE
q5..ans <- 2 * qt(p=1-0.5*q5..α, df=q5..df) * q5..est.σ/sqrt(q5..n)
round(q5..ans, 3)
#install.packages("docstring")
library(docstring)
#++++++++++++++++++++++++++++++++++++++++
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, p, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=qnorm((1+p)/2)
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalT<-function(n, sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=qt(((1+p)/2),(n-1)) #quantile of variance estimate
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
#run example:
rangeConfIntervalT(n= 10,sd= 12.9, p= 0.92, avg=75 ,is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α=", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#install.packages("docstring")
library(docstring)
#++++++++++++++++++++++++++++++++++++++++
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, p, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=qnorm((1+p)/2)
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalT<-function(n, sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=qt(((1+p)/2),(n-1)) #quantile of variance estimate
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
#run example:
rangeConfIntervalT(n= 10,sd= 12.9, p= 0.92, avg=75 ,is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α=", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
knitr::opts_chunk$set(echo = TRUE)
#tinytex::install_mathtools() #install required only once per user
library(mathtools)
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_mathtools() #install required only once per user
knitr::opts_chunk$set(echo = TRUE)
tinytex::install(mathtools) #install required only once per user
knitr::opts_chunk$set(echo = TRUE)
mathtools::install_mathtools() #install required only once per user
install.packages("TeXLive")
?'::'
knitr::opts_chunk$set(echo = TRUE)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α=", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of req Confidence Level: 1-α = ", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α = ", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Confidence Level's quantile: 1-α = ", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
install.packages("amsmath")
install.packages("bookdown")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("docstring")
library(docstring)
#++++++++++++++++++++++++++++++++++++++++
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, p, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=qnorm((1+p)/2)
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalT<-function(n, sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=qt(((1+p)/2),(n-1)) #quantile of variance estimate
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
#run example:
rangeConfIntervalT(n= 10,sd= 12.9, p= 0.92, avg=75 ,is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Confidence Level's quantile: 1-α = ", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#GIVEN DATA
q1..unbiased.est = 500 #hours, avg(shelf life)
q1..1minusα = 0.94 #quantile of required confidence level
q1..α = 1 - q1..1minusα #required max standard error
q1..σ = sqrt(918)
q1..n = 36 #sample size, number of light bulbs in sample
#CALCULATE
q1..ans <-
q1..unbiased.est + qnorm(1-0.5*q1..α) * q1..σ/sqrt(q1..n)
round(q1..ans, 3)
#GIVEN DATA
q3..1minusα = 1.64 #quantile of required confidence level
q3..df = 46 #degrees of freedom
#CALCULATE
q3..ans <- pt(q=q3..1minusα, df=q3..df)
round(q3..ans, 4)
#GIVEN DATA
q4..1minusα = 0.62 #quantile of required confidence level
q4..df = 62 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4..ans, 3)
#GIVEN DATA
q5..1minusα = 0.92 #quantile of required confidence level
q5..α = 1 - q5..1minusα #required max standard error
q5..n = 10 #sample size
q5..df = q5..n-1 #degrees of freedom
q5..est.σ = 12
q5..unbiased.est = 75 #avg(package weight)
#CALCULATE
q5..ans <- 2 * qt(p=1-0.5*q5..α, df=q5..df) * q5..est.σ/sqrt(q5..n)
round(q5..ans, 3)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("docstring")
library(docstring)
#++++++++++++++++++++++++++++++++++++++++
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalZ<-function(n, p, avg, sd, is_sd=T){
#' CI for Normal distribution with given variance
#'
#' The Confidence Interval is calculated using the Z table, i.e.
#' the cumulative probability function of the standardized norm distr.
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
z=qnorm((1+p)/2)
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
#run example:
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
#++++++++++++++++++++++++++++++++++++++++
rangeConfIntervalT<-function(n, sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=qt(((1+p)/2),(n-1)) #quantile of variance estimate
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
#run example:
rangeConfIntervalT(n= 10,sd= 12.9, p= 0.92, avg=75 ,is_sd=T)
#++++++++++++++++++++++++++++++++++++++++
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Confidence Level's quantile: 1-α = ", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
#run example:
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
#GIVEN DATA
q1..unbiased.est = 500 #hours, avg(shelf life)
q1..1minusα = 0.94 #quantile of required confidence level
q1..α = 1 - q1..1minusα #required max standard error
q1..σ = sqrt(918)
q1..n = 36 #sample size, number of light bulbs in sample
#CALCULATE
q1..ans <-
q1..unbiased.est + qnorm(1-0.5*q1..α) * q1..σ/sqrt(q1..n)
round(q1..ans, 3)
#GIVEN DATA
q3..1minusα = 1.64 #quantile of required confidence level
q3..df = 46 #degrees of freedom
#CALCULATE
q3..ans <- pt(q=q3..1minusα, df=q3..df)
round(q3..ans, 4)
#GIVEN DATA
q4..1minusα = 0.62 #quantile of required confidence level
q4..df = 62 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4..ans, 3)
#GIVEN DATA
q5..1minusα = 0.92 #quantile of required confidence level
q5..α = 1 - q5..1minusα #required max standard error
q5..n = 10 #sample size
q5..df = q5..n-1 #degrees of freedom
q5..est.σ = 12
q5..unbiased.est = 75 #avg(package weight)
#CALCULATE
q5..ans <- 2 * qt(p=1-0.5*q5..α, df=q5..df) * q5..est.σ/sqrt(q5..n)
round(q5..ans, 3)
