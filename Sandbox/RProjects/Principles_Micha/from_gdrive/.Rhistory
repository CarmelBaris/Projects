cat("\n upper bound (right border) :" , avg+z*(sd/sqrt(n)))
rangeConfIntervalZ(n=36 ,sd=901 ,p=0.94,avg=500 ,is_sd=F)
# calculating Confidence Interval for Normal distribution
rangeConfIntervalZ<-function(n,sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
if (is_sd == F){sd = sqrt(sd)}
z=qnorm((1+p)/2)
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border) :", avg-z*(sd/sqrt(n)))
cat("\n upper bound (right border) :" , avg+z*(sd/sqrt(n)))
cat("\n length is :" , 2*z*sd/sqrt(n))
}
rangeConfIntervalZ(n=36 ,sd=901 ,p=0.94,avg=500 ,is_sd=F)
#calculating by T, variance unknown
rangeConfIntervalT<-function(n,sd,p,avg, is_sd=T){
#if it is the var enter F , if sd enter T or noting
if (is_sd == F){sd = sqrt(sd)}
t=qt(((1+p)/2),(n-1))
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
rangeConfIntervalT(n= 10,sd= 12.9,p= 0.92,avg=75 ,is_sd=T)
?qt
2*pnorm(1.265)-1
library(docstring)
install.packages(docstring)
install.packages("docstring")
#install.packages("docstring")
library(docstring)
rangeConfIntervalZ(n=36 ,sd=901 ,p=0.94,avg=500 ,is_sd=F)
VarianceToSd(4)
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){sd = sqrt(sd)}
return(sd)
}
VarianceToSd(4)
VarianceToSd(4)
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(sd)}
return(x)
}
VarianceToSd(4)
VarianceToSd(4,F)
VarianceToSd <- function(x, is_sd=T){
#' Helper function
#'
#' @param x given variance
if (is_sd == F){x = sqrt(x)}
return(x)
}
VarianceToSd(4,F)
ConfLevel<-function(n,upperb, lowerb, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right)
#' @param lowerb lower bound (left)
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p=2 * pnorm( L*sqrt(n) / (2*sd) )
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("Confidence interval length is :" , L)
}
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("Confidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb, is_sd)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd=sd,is_sd=is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("Confidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb, is_sd)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(x=sd, is_sd=is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("Confidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb, is_sd)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("Confidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb, is_sd=T)
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
cat("/nConfidence interval length is :" , L)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used:",paste0(p*100,"%"))
cat("/nConfidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("/n Confidence Level that was used:",paste0(p*100,"%"))
cat("/n Confidence interval length is :" , L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("/n Confidence Level that was used: ", paste0(p*100,"%"))
cat("/n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
rangeConfIntervalT(n= 10,sd= 12.9,p= 0.92,avg=75 ,is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used: ", paste0(p*100,"%"))
cat("/n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat("Confidence Level that was used: ", paste0(p*100,"%"))
cat("\n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Confidence Level that was used: ", paste0(p*100,"%"))
cat("\n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α=", p)
cat("\n Confidence Level that was used: ", paste0(p*100,"%"))
cat("\n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel<-function(n,upperb, lowerb=0, sd, is_sd=T){
#' CL for Normal distribution with given variance
#'
#' The Confidence Level is reverse-engineered from the
#' given bounds of the Confidence Interval
#'
#' @param n number of samples
#' @param upperb upper bound (right), set to length if given
#' @param lowerb lower bound (left), leave if given length
#' @param sd given standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd, is_sd)
L=upperb-lowerb
p= 2*pnorm( L*sqrt(n) / (2*sd) ) -1
cat(" Quantile of Confidence Level: 1-α=", round(p,3))
cat("\n Confidence Level that was used: ", paste0(round(p,3)*100,"%"))
cat("\n Confidence interval length is : ", L)
}
ConfLevel(n= 10, sd= 5, upperb=4, lowerb=0, is_sd=T)
ConfLevel(n= 20, sd= 5, upperb=4, lowerb=0, is_sd=T)
rangeConfIntervalT<-function(n, sd, p, avg, is_sd=T){
#when given the variance enter F, otherwise will be treated as sd
#' CI for Normal distribution with unknown variance
#'
#' The Confidence Interval is calculated using the T distribution
#'
#' @param n number of samples
#' @param p required Confidence Level, 1-α
#' @param avg mean of all samples, as the expectancy's estimator
#' @param sd estimate of standard deviation
#' @param is_sd F when given variance, otherwise will be treated as sd
VarianceToSd(sd,is_sd)
t=qt(((1+p)/2),(n-1)) #quantile of variance estimate
cat("Confidence interval for a confidence level of:",paste0(p*100,"%"))
cat("\n lower bound (left border): ", avg-t*(sd/sqrt(n)))
cat("\n upper bound (right border): ", avg+t*sd/sqrt(n))
cat("\n length is: " , 2*t*sd/sqrt(n))
}
rangeConfIntervalT(n= 10,sd= 12, p= 0.92, avg=75 ,is_sd=T)
knitr::opts_chunk$set(echo = TRUE)
#GIVEN DATA
q1..unbiased.est = 500 #hours, avg(shelf life)
q1..1minusα = 0.94 #quantile of required confidence level
q1..α = 1 - q1..1minusα #required max standard error
q1..σ = sqrt(907)
q1..n = 36 #sample size, number of light bulbs in sample
#CALCULATE
q1..ans <-
q1..unbiased.est + qnorm(1-0.5*q1..α) * q1..σ/sqrt(q1..n)
round(q1..ans, 3)
#GIVEN DATA
q3..1minusα = 1 #quantile of required confidence level
q3..df = 12 #degrees of freedom
#CALCULATE
q3..ans <- pt(q=q3..1minusα, df=q3..df)
round(q3..ans, 4)
#GIVEN DATA
q4..1minusα = 0.94 #quantile of required confidence level
q4..df = 35 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4q3..ans, 3)
#GIVEN DATA
q4..1minusα = 0.94 #quantile of required confidence level
q4..df = 35 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4..ans, 3)
#GIVEN DATA
q4..1minusα = 0.64 #quantile of required confidence level
q4..df = 64 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4..ans, 3)
#GIVEN DATA
q4..1minusα = 0.62 #quantile of required confidence level
q4..df = 62 #degrees of freedom
#CALCULATE
q4..ans <- qt(p=q4..1minusα, df=q4..df)
round(q4..ans, 3)
12.9
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.94,avg=75 ,is_sd=F)
rangeConfIntervalZ(n=10 ,sd=12.9 ,p=0.92,avg=75 ,is_sd=F)
1-0.08
rangeConfIntervalT(n= 10,sd= 12.9, p= 0.92, avg=75 ,is_sd=T)
0.33*4.2
0.65+0.34+0.11+0.22
1.32/4
# sample
n=20
# sample
n=20
U <- runif(1)*2
X <- rnorm(n,mean=U,sd=4)
m.X <- mean(X)
sd.x <- sd(X)
#CI
z <- qnorm(0.95)  # 90% CI
t <- qt(0.95,n-1)
left.known <- m.X-z*4/sqrt(n)
right.known <- m.X+z*4/sqrt(n)
left.unknown <- m.X-t*sd.x/sqrt(n)
right.unknown <- m.X+t*sd.x/sqrt(n)
#Length
right.known-left.known
right.unknown-left.unknown
#plot
a <- min(left.known,left.unknown)
b <- max(right.known,right.unknown)
plot(c(left.known,right.known),c(1,1),type='l', lwd=3,ylim=c(0,1.5),xlim=c(-3,5),
xlab='mu',ylab="")
lines(c(left.unknown,right.unknown),c(0.5,0.5),type='l', lwd=3,col='blue')
abline(v=c(left.unknown,right.unknown),col='blue',lty='dashed')
abline(v=c(left.known,right.known),col='black',lty='dashed')
abline(v=U,col='red')
# dist of length
n <- 8
alpha <- 0.05
sd.true <- 5
X <- rnorm(10000*n,0,sd.true)
dim(X) <- c(10000,n)
L <- NULL
for (i in 1:10000){
Si <- sd(X[i,])
Li <- 2*Si/sqrt(n)*qt(1-alpha/2,n-1)
L <- c(L,Li)
}
hist(L,freq=FALSE,breaks=100)
L.norm <- 2*sd.true/sqrt(n)*qnorm(1-alpha/2)
abline(v=L.norm,col='blue',lwd=3)
mean(L<L.norm)
